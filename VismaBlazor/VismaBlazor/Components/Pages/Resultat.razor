@page "/Resultat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Models
@using System.Text.Json
@using System.Text
@using Newtonsoft.Json
@using Radzen
@using Radzen.Blazor
@inject VismaBlazor.HttpClientPost HttpClientPost
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]


<PageTitle>Resultat</PageTitle>

<h1>Resultat</h1>

@if (BrukerRes == null)
{
    <p><em>Loading...</em></p>
}

@if (BrukerRes != null && BrukerRes.Any())
{
<div class="pb-4">
    <RadzenGrid TItem="BrukerRespons" Data="@BrukerRes" Style="width: 100%"
                AllowPaging="true" AllowSorting="true">
        <Columns>
            <RadzenGridColumn TItem="BrukerRespons" Property="Id" Title="ID" Width="80px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="NyId" Title="NyID" Width="80px" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Fornavn" Title="Fornavn" Width="100px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Mellomnavn" Title="Mellomnavn" Width="100px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Etternavn" Title="Etternavn" Width="100px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Tlf" Title="Telefon" Width="100px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Brukernavn" Title="Brukernavn" Width="120px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Passord" Title="Passord" Width="120px" Filterable="true" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Epost" Title="E-post" Width="200px" Filterable="true" />
        </Columns>
    </RadzenGrid>
   <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10" Wrap="FlexWrap.Wrap" class="pt-4">
        <RadzenButton id="Jsonfil2" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (EksporterJson())) Text="JSON" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Csvfil2" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("csv"))) Text="CSV" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Txtfil2" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("txt"))) Text="TXT" ButtonStyle="ButtonStyle.Success" />
  </RadzenStack>
  </div>
} 

@if (errorMelding != null)
{
    <div class="pb-4">  
    <RadzenAlert Title="Response Melding" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
        @errorMelding
    </RadzenAlert> 
    </div>
}

@code {
    private List<BrukerRespons>? BrukerRes;

    private string? errorMelding;


    protected override async Task OnInitializedAsync()
    {
        BrukerRes = HttpClientPost.HentBrukerResponse();
        errorMelding = HttpClientPost.HentErrorMelding();
    }

    public async Task JsRuntimeMetode(string type, string convert)
    {
        if (JSRuntime != null)
        {
            await JSRuntime.InvokeVoidAsync("saveAsFile", type, convert);
            Console.WriteLine($"Vellykket med eksporteringen! Antall ansatte: {BrukerRes.Count}.");
        }
        else
        {
            Console.WriteLine("JSRuntime er null. Kan ikke eksportere til JSON.");
        }
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public async Task EksporterJson()
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                // Oppretter liste med anonyme objekter basert på ansatte-data
                var jsonData = BrukerRes;
                // Serialisere listen til JSON
                var jsonString = JsonConvert.SerializeObject(jsonData, Formatting.Indented);
                await JsRuntimeMetode("data.json", jsonString);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering til JSON: {ex.Message}");
        }
    } 

    public async Task Eksporter(string fileExtension)
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                string fileName = $"data.{fileExtension}";
                // Eksporter til CSV-fil
                if (fileExtension.ToLower() == "csv")
                {
                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await writer.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var bruker in BrukerRes)
                        {
                            string linje = $"{bruker.Id},{bruker.NyId},{bruker.Fornavn},{bruker.Mellomnavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await writer.WriteLineAsync(linje);
                        }
                    }
                    string fileContent = await File.ReadAllTextAsync(fileName);
                    await JsRuntimeMetode(fileName, fileContent);
                }
                // Eksporter til TXT-fil
                else if (fileExtension.ToLower() == "txt")
                {
                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await writer.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var ansatt in BrukerRes)
                        {

                            string linje = $"{ansatt.Id},{ansatt.NyId},{ansatt.Fornavn},{ansatt.Mellomnavn},{ansatt.Etternavn},{ansatt.Tlf},{ansatt.Brukernavn},{ansatt.Passord},{ansatt.Epost}";
                            await writer.WriteLineAsync(linje);
                        }
                    }
                    string fileContent = await File.ReadAllTextAsync(fileName);

                    await JsRuntimeMetode(fileName, fileContent);
                }
                Console.WriteLine($"Eksportert til {fileExtension.ToUpper()}.");
            }
            else
            {
                Console.WriteLine($"Ingen data å eksportere.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering: {ex.Message}");
        }
    }
}
