@page "/Importer"
@inject IConfiguration config
@inject VismaBlazor.HttpClientPost HttpClientPost
@inject NavigationManager NavigationManager
@using CsvHelper
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using OpenQA.Selenium
@using Radzen
@using Radzen.Blazor
@using Microsoft.JSInterop;
@using System.IO
@using System.Globalization
@using System.Text
@using Microsoft.AspNetCore.Components.Forms;
@using Models
@attribute [Authorize]
@using System.Linq
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

<PageTitle>Importer fil</PageTitle>

<RadzenCard class="py-4 flex-column" Style="width: 100%">
    <RadzenAlert Title="Last opp en fil" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        Velg en fil for å starte importen
    </RadzenAlert>
    <div id="lastOpp">
        <InputFile id="lastOppID" OnChange="lastOppFil" />
    </div>
    <RadzenAlert Title="Skriv inn domene for mail" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        F.eks: Generator.com
    </RadzenAlert>
    <div class="py-3">
        <RadzenTextBox id="generatormanuelt"
                       Value="@domain"
                       Change=@(args => domain = args)
                       Placeholder="F.eks: Generator.com"
                       style="width: 200px" />
    </div>
    <div id="oppLastning">
        <RadzenButton id="oppLastningID" Text="Upload" Click=@(args => Opplastning(fil)) class="d-block pt-2 mt-4 bg-success" />
    </div>
</RadzenCard>

@if (feil.Count > 0)
        @foreach (var error in feil)

@if (errors.Count > 0)
                Her er det noe feil!
            </RadzenAlert>              

@if (errors.Count > 0)
                Alert without message icon
            </RadzenAlert>
        
        
        
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                Alert without message icon
            </RadzenAlert>
        
        
        
}

@if (BrukerRes != null && BrukerRes.Any())
{
    
<div class="pb-4">
    <RadzenGrid id="grid" TItem="BrukerRespons" Data="@BrukerRes" AllowPaging="true" AllowSorting="true">
        <Columns>
            <RadzenGridColumn  TItem="BrukerRespons" Property="Id" Title="ID" Width="80px" />
            <RadzenGridColumn TItem="BrukerRespons" Property="NyId" Title="NyID" Width="80px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Fornavn" Title="Fornavn" Width="100px" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Mellomnavn" Title="Mellomnavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Etternavn" Title="Etternavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Tlf" Title="Telefon" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Brukernavn" Title="Brukernavn" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Passord" Title="Passord" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Epost" Title="E-post" Width="120px" />
        </Columns>
    </RadzenGrid>
   <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10" Wrap="FlexWrap.Wrap" class="pt-4">
        <RadzenButton id="Jsonfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (EksporterJson())) Text="JSON" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Csvfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("csv"))) Text="CSV" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Txtfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("txt"))) Text="TXT" ButtonStyle="ButtonStyle.Success" />
    private List<string> feil = new List<string>();
    public IBrowserFile? fil;
    private IWebDriver driver;

    // Inject IJSRuntime
    <RadzenAlert Title="Ingen data å vise." style="width: 100%" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        Last opp en fil (TXT, CSV eller JSON)
    public long maxFileSize = 1024 * 1024 * 3;  // 3MB  List<Ansatte> ansatteListe = new List<Ansatte>();
    private List<string> errors = new List<string>();
    public IBrowserFile? file;
    public Random random = new Random();
    private IWebDriver driver;

    //Radzen
    HorizontalAlign pagerHorizontalAlign = HorizontalAlign.Justify;
    PagerPosition pagerPosition = PagerPosition.Bottom;


    // Inject IJSRuntime
    public string? domain { get; set; }
    public List<BrukerRespons>? BrukerRes;
    public long maxFileSize = 1024 * 1024 * 3;  // 3MB  List<Ansatte> ansatteListe = new List<Ansatte>();
    private List<string> errors = new List<string>();
    public IBrowserFile? file;
    public Random random = new Random();
    private IWebDriver driver;

    //Radzen
    HorizontalAlign pagerHorizontalAlign = HorizontalAlign.Justify;
    PagerPosition pagerPosition = PagerPosition.Bottom;
    public async Task<List<BrukerRespons>> Files(IBrowserFile fil)

    // Inject IJSRuntime
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    //1
        Console.WriteLine($"Filen '{fil.Name}' laster opp..");

        try
        {
            if (e.File != null)
            {
                fil = e.File;
                var allIds = new List<string>();
                string linje;
                bool forsteLinje = true;
                while ((linje = await leser.ReadLineAsync()) != null)
                Console.WriteLine("Ingen fil ble valgt.");
                    if (forsteLinje)
        }
                        forsteLinje = false;

            Console.WriteLine($"Feil ved lasting av fil: {ex.Message}");
                    allIds.AddRange(linje.Split(',').Where(id => !string.IsNullOrWhiteSpace(id)));
        }
    }

                var allIds = new List<string>();
                string line;
                bool isFirstLine = true;
                while ((line = await reader.ReadLineAsync()) != null)
            return new List<BrukerRespons>();
                    if (isFirstLine)
        List<BrukerRespons> idListe = new List<BrukerRespons>();
                        isFirstLine = false;

        try
                    allIds.AddRange(line.Split(',').Where(id => !string.IsNullOrWhiteSpace(id)));
            using (var stream = fil.OpenReadStream())
            using (var leser = new StreamReader(stream))
            {
                var allIds = new List<string>();
                string line;
                bool isFirstLine = true;
                while ((line = await reader.ReadLineAsync()) != null)
                {
                    if (isFirstLine)
                    {
                        isFirstLine = false;
                        continue;
                    }
            feil.Add($"Feil ved innlesing av fil: {fil.Name}. Feilmelding: {ex.Message}");
                }
                if (alleID.Count > 0)
                {

    public async Task<List<BrukerRespons>> FilesJson(IBrowserFile fil)
                    {
        if (this.fil == null)
                        var idsString = string.Join(",", alleID);

                        // ikke for hver linje, men alle på en
                        await HttpClientPost.PostFlereId(idsString, domain);

        Console.WriteLine($"Laster opp filen '{this.fil.Name}'...");
                        if (HttpClientPost.HentBrukerResponse() != null)
            errors.Add($"Feil ved innlesing av fil: {file.Name}. Feilmelding: {ex.Message}");
            using (var stream = this.fil.OpenReadStream())
            using (var reader = new StreamReader(stream))
                        Console.WriteLine("Brukerdata for alle IDer lagt til."); //Sjekk ved testing
    public async Task<List<BrukerRespons>> FilesJson(IBrowserFile file)
                    catch (Exception ex)
        if (file == null)

                var gyldigId = new List<string>();

                foreach (var bruker in brukerListe)
                {
                    gyldigId.Add(bruker.Id);
                }

                
                
                
                if (gyldigId.Any() && this.fil != null)
                }
            }
        }
        Console.WriteLine($"Laster opp filen '{file.Name}'...");
        {
            errors.Add($"Feil ved innlesing av fil: {file.Name}. Feilmelding: {ex.Message}");
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
    }
    public async Task<List<BrukerRespons>> FilesJson(IBrowserFile file)
    {
        if (file == null)
                var gyldigId = brukerListe.Where(b => int.TryParse(b.Id, out _)).Select(b => b.Id).ToList();
                if (gyldigId.Any() && file != null)
            return new List<BrukerRespons>();
        }
        List<BrukerRespons> gyldigeBrukere = new List<BrukerRespons>();
        Console.WriteLine($"Laster opp filen '{file.Name}'...");
        try
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            {

    //3 //Sjekker om filen samsvarer med riktige typer-filer
    public async Task Opplastning(IBrowserFile fil)
                var gyldigId = brukerListe.Where(b => int.TryParse(b.Id, out _)).Select(b => b.Id).ToList();
                if (gyldigId.Any() && file != null)
                {
                    //komma-separert streng
                    string idString = string.Join(",", (IEnumerable<string>)gyldigId);
                    if (domain != null){
                    // Post IDs til api
                    await HttpClientPost.PostFlereId(idString, domain);
                    BrukerRes = await Files(fil);
                    Console.WriteLine($"Filen '{fil.Name}' er ferdig lastet opp");
                    // metode for å hente responsen            

    //3
                    BrukerRes = await FilesJson(fil);
                    Console.WriteLine($"Filen '{fil.Name}' er ferdig lastet opp.");
        }
        catch (JsonException e)
        {
                    feil.Add("Det må være en JSON-, CSV eller TXT-fil.");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Generisk feil: {e.Message}");
                    BrukerRes = await Files(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp");
    }

    //3
                    BrukerRes = await FilesJson(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp.");
    {
        try
        {
            feil.Add($"Error: {ex.Message}");
            {
                var fileExtension = Path.GetExtension(fil.Name)?.ToLower();
                if (fileExtension == ".txt" || fileExtension == ".csv") 
                {
                    BrukerRes = await Files(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp");
                }
                else if (fileExtension == ".json")
                {
                    BrukerRes = await FilesJson(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp.");
                }
                else if (fileExtension != ".csv" || fileExtension != ".json" || fileExtension != ".txt")
                {
                    using (StreamWriter skriver = new StreamWriter(filNavn))
                    Console.WriteLine("Det må være en JSON-, CSV eller TXT-fil.");
                }
            }
            else if (fil == null)
                            string linje = $"{bruker.Id},{bruker.NyId},{bruker.Fornavn},{bruker.Mellomnavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await skriver.WriteLineAsync(linje);
            }
            else
                    string innhold = await File.ReadAllTextAsync(filNavn, Encoding.UTF8);
                    await JsRuntimeMethod(filNavn, innhold);
            }
        }
        catch (Exception ex)
        {
                    using (StreamWriter writer = new StreamWriter(filNavn))
            throw;
        }
    }

                            string linje = $"{bruker.Id},{bruker.NyId},{bruker.Fornavn},{bruker.Mellomnavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await writer.WriteLineAsync(linje);
        try
        {
                    string fileContent = await File.ReadAllTextAsync(filNavn);
                    await JsRuntimeMethod(filNavn, fileContent);
                string filNavn = $"data.{fileExtension}";
                // Eksporter til CSV-fil
                if (fileExtension.ToLower() == "csv")
                {
                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await skriver.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var bruker in BrukerRes)
                        {
                            string linje = $"{bruker.Id},{bruker.NyId},{bruker.Fornavn},{bruker.Mellomnavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await writer.WriteLineAsync(linje);
                        }
                    }
                    string fileContent = await File.ReadAllTextAsync(fileName);
                    await JsRuntimeMethod(fileName, fileContent);
                }
                // Eksporter til TXT-fil
                else if (fileExtension.ToLower() == "txt")
                {
                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await writer.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");

                // Serialisere listen til JSON
                var jsonString = JsonConvert.SerializeObject(jsonData,Formatting.Indented);

                await JsRuntimeMethod("data.json", jsonString);

                    string fileContent = await File.ReadAllTextAsync(fileName);
                    await JsRuntimeMethod(fileName, fileContent);
                }
                Console.WriteLine($"Eksportert til {fileExtension}");
            }
            else
            {
                Console.WriteLine($"Ingen data å eksportere");
            }

                // Serialisere listen til JSON
                var jsonString = JsonConvert.SerializeObject(jsonData, Formatting.Indented);

    public async Task JsRuntimeMethod(string type, string konverter)


    public async Task EksporterJson()
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                // Oppretter liste med anonyme objekter fra ansatte-data 
                var jsonData = BrukerRes;

    
  }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering til JSON: {ex.Message}");








     

    

    
        }
        {
            Console.WriteLine("JSRuntime er null. Kan ikke eksportere til JSON.");
        }
    }








     

    

    
        }
    





   