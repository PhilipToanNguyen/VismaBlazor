@page "/"
@inject IConfiguration config
@inject IJSRuntime JSRuntime;
@using CsvHelper
@using Newtonsoft.Json
@using Radzen
@using Radzen.Blazor
@using System.IO
@using System.Globalization
@using VismaBlazor.Components.Data
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

@using System;
@using System.Collections.Generic;
@using System.Linq;


<PageTitle>Importer fil</PageTitle>

@*
Skal inneholde en knapp for å laste opp filer, og en knapp for å starte importen
Denne skal også sende filen til serveren og genere data fra filen.
Dataen skal så vises i resultat page som åpnes etter importen er ferdig.
*@


<div class="d-flex justify-content-between form-control">
<InputFile OnChange="LoadFiles" />
    <button class="btn btn-primary" @onclick="() => Import(file)">Import</button>
</div>




@if (errors.Count > 0)

{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
        </ul>
}

@if (ansatte != null && ansatte.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Fornavn</th>
                <th>Etternavn</th>
                <th>Telefon</th>
                <th>Brukernavn</th>
                <th>Passord</th>
                <th>E-post</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ansatt in ansatte)
            {
                <tr>
                    <td>@ansatt.Id</td>
                    <td>@ansatt.Fornavn</td>
                    <td>@ansatt.Etternavn</td>
                    <td>@ansatt.Telefon</td>
                    <td>@ansatt.Brukernavn</td>
                    <td>@ansatt.Passord</td>
                    <td>@ansatt.EPost</td>
                </tr>
            }
        </tbody>
    </table>
    
} 
else
{
    <p>Ingen data å vise... </p>  
}

@code
{
    public List<Ansatte> ansatte;
    public long maxFileSize = 1024 * 1024 * 3;  // 3MB  List<Ansatte> ansatteListe = new List<Ansatte>();
    public List<string> errors = new();
    public IBrowserFile? file;




    //1
    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File != null)
            {
                file = e.File;
                Console.WriteLine($"Filen '{file.Name}' ble lastet opp.");
            }
            else
            {
                Console.WriteLine("Ingen fil ble valgt.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved lasting av fil: {ex.Message}");
            throw; // Kast unntaket videre for å indikere at handlingen mislyktes
        }
    }


    //2
    //Her blir Json-Deserializerobject tatt i bruk..
    // Stream -> Reader -> Deserialize -> Visualiser.
    public async Task<List<Ansatte>> FileJson(IBrowserFile file) //Json
    {
        // Sjekker om filen er null. Returnerer tom liste, hvis den er tom.
        if (file is null)
        {
            return new List<Ansatte>();
        }

        //Try catch. Åpner strømmen og kopierer innholdet ved bruk av memorystream midlertidig.
        try
        {

            using (MemoryStream memoryStream = new MemoryStream())
            {
                Console.WriteLine($"Filen '{file.Name}' Importeres....");
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                //Deserialisering av JSON ved bruk av streamreader til å lese json innhold fra memorystreamen.
                //Vi bruker Newtonsoft.Json- biblioteket for å deserialisere til en liste og returneres.
                using (StreamReader reader = new StreamReader(memoryStream))
                {

                    var json = await reader.ReadToEndAsync();
                    ansatte = JsonConvert.DeserializeObject<List<Ansatte>>(json);


                    return ansatte;                 
                }

            }

        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }

    //2
    // SKAL skille kommaer uavhengig av filtyper. Men husk å endre dette i metoden Import(). Klarer å skille i csv filer, men ikke Json.
    public async Task<List<Ansatte>> Files(IBrowserFile file)
    {

        if (file is null)
        {
            return new List<Ansatte>();
        }

        List<Ansatte> ansatteList = new List<Ansatte>();
        Console.WriteLine($"Filen '{file.Name}' importerer.");
        try
        {
            using var stream = file.OpenReadStream(maxFileSize); //Scanner sammenlignet med Java-scanner
            using var reader = new StreamReader(stream); //Leser
            string? line;


            while ((line = await reader.ReadLineAsync()) != null) //Leser linje for linje
            {

                var column = line.Split(','); //Leser linje for linje, men splitter ulike verdier med kommaer i
                if (int.TryParse(column[0], out var id) && int.TryParse(column[3], out var telefon)) //  Id = int.Parse(column[0]) Kan også gjøres istedet for å bruke ( if (int.TryParse(column[0], out var id)) )
                {
                    var ansatt = new Ansatte
                        {
                            Id = id,
                            Fornavn = column[1],
                            Etternavn = column[2],
                            Telefon = telefon,
                            Brukernavn = column[4],
                            Passord = column[5],
                            EPost = column[6],
                        };

                    ansatteList.Add(ansatt);

                }
            }

        }

        catch (Exception ex) // Feilmeldinger
        {
            errors.Add($"Feil ved innlesing av fil: {file.Name}. Feilmelding: {ex.Message}");
        }

        return ansatteList;

    }

    //3
    //Sjekker om filen samsvarer med riktige typer-filer
    public async Task Import(IBrowserFile file)
    {
        try
        {

            if (file != null)
            {
                var fileExtension = Path.GetExtension(file.Name)?.ToLower();


                if (fileExtension == ".txt" || fileExtension == ".csv")
                {
                    ansatte = await Files(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig importert.");

                }
                else if (fileExtension == ".json")
                {
                    ansatte = await FileJson(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig importert.");
                }

                else if (fileExtension != ".csv" || fileExtension != ".json" || fileExtension != ".txt")
                {
                    errors.Add("Det må være en JSON-, CSV eller TXT-fil.");
                    Console.WriteLine("Det må være en JSON-, CSV eller TXT-fil.");
                }


            }
            else if (file == null)
            {
                Console.WriteLine("Kan ikke importere fordi ingen vil er valgt");
            }
            else
            {
                Console.WriteLine("123123");
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }
    }

    //4
    //Bekreftelse på at det visualiseres (Brukes til testing)
    public bool Visualisering()
    {
        if (ansatte != null && ansatte.Any())
        {
            Console.WriteLine($"Filen '{file.Name} 'Visualiseres!");
            Console.WriteLine($"Visualisering OK! Antall ansatte som vises: '{ansatte.Count}'");           
            return true;
        }
     
        else
        {
            Console.WriteLine("Ingen data å vise.");
            return false;
        }
    }
}