@page "/Importer"
@inject IConfiguration config
@inject VismaBlazor.HttpClientPost HttpClientPost
@inject NavigationManager NavigationManager
@using CsvHelper
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using OpenQA.Selenium
@using Radzen
@using Radzen.Blazor
@using Microsoft.JSInterop;
@using System.IO
@using System.Globalization
@using System.Text
@using Microsoft.AspNetCore.Components.Forms;
@using Models

@using System.Linq

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]





<PageTitle>Importer fil</PageTitle>

@*
Skal inneholde en knapp for å laste opp filer, og en knapp for å starte importen
Denne skal også sende filen til serveren og genere data fra filen.
Dataen skal så vises i resultat page som åpnes etter importen er ferdig.
*@




<RadzenCard class="py-4 flex-column" Style="width: 100%">
    <div id="lastOpp">
        <InputFile id="lastOppID" OnChange="LoadFiles" />
    </div>

    <div id="oppLastning">
        <RadzenButton id="oppLastningID" Text="Upload" Click=@(args => Opplastning(file)) class="d-block pt-2 mt-4 bg-success" />
    </div>
</RadzenCard>




@if (errors.Count > 0)

        @foreach (var error in errors)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                Alert without message icon
            </RadzenAlert>
        
        
        
}


@if (BrukerRes != null && BrukerRes.Any())
{
    
    <RadzenGrid id="grid" TItem="BrukerRespons" Data="@BrukerRes"
                AllowPaging="true" AllowSorting="true" AllowFiltering="true">
        <Columns>
            <RadzenGridColumn  TItem="BrukerRespons" Property="Id" Title="ID" Width="80px" Filterable="true" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Fornavn" Title="Fornavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Etternavn" Title="Etternavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Tlf" Title="Telefon" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Brukernavn" Title="Brukernavn" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Passord" Title="Passord" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Epost" Title="E-post" Width="120px" />
        </Columns>
    </RadzenGrid>
   
   <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10" Wrap="FlexWrap.Wrap" class="pt-4">
        <RadzenButton id="Jsonfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (EksporterJson())) Text="JSON" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Csvfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("csv"))) Text="CSV" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Txtfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("txt"))) Text="TXT" ButtonStyle="ButtonStyle.Success" />
  </RadzenStack>
   
} 
else
{
    <RadzenAlert Title="Ingen data å vise." style="width: 100%" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        Last opp en fil (TXT, CSV eller JSON)
    </RadzenAlert>
}


@code
{



    public List<BrukerRespons>? BrukerRes;
    public long maxFileSize = 1024 * 1024 * 3;  // 3MB  List<Ansatte> ansatteListe = new List<Ansatte>();
    private List<string> errors = new List<string>();
    public IBrowserFile? file;
    public Random random = new Random();
    private IWebDriver driver;

    //Radzen
    HorizontalAlign pagerHorizontalAlign = HorizontalAlign.Justify;
    PagerPosition pagerPosition = PagerPosition.Bottom;


    // Inject IJSRuntime
    [Inject]
    public IJSRuntime JSRuntime { get; set; }



    //1
    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File != null)
            {
                file = e.File;
                Console.WriteLine($"Filen '{file.Name}' ble valgt.");
            }
            else
            {
                Console.WriteLine("Ingen fil ble valgt.");
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Feil ved lasting av fil: {ex.Message}");
            throw; // Kast unntaket videre for å indikere at handlingen mislyktes
        }
    }



    public async Task<List<BrukerRespons>> Files(IBrowserFile file)
    {
        if (file is null)
        {
            return new List<BrukerRespons>();
        }

        List<BrukerRespons> idListe = new List<BrukerRespons>();
        Console.WriteLine($"Filen '{file.Name}' laster opp..");

        try
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            {
                var allIds = new List<string>();
                string line;
                bool isFirstLine = true;

                while ((line = await reader.ReadLineAsync()) != null)

                {
                    if (isFirstLine)
                    {
                        isFirstLine = false;
                        continue;
                    }
                    allIds.AddRange(line.Split(',').Where(id => !string.IsNullOrWhiteSpace(id)));
                }

                if (allIds.Count > 0)
                {
                    try
                    {
                        // Konverter listen til komma sepparert
                        var idsString = string.Join(",", allIds);

                        // ikke for hver linje, men alle på en
                        await HttpClientPost.PostFlereId(idsString);

                        // Anta at HentBrukerResponse er en metode for å hente lagrede svar
                        if (HttpClientPost.HentBrukerResponse() != null)
                        {
                            idListe.AddRange(HttpClientPost.HentBrukerResponse());
                        }

                        Console.WriteLine("Brukerdata for alle IDer lagt til.");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Feil ved henting av brukerdata: {ex.Message}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Feil ved innlesing av fil: {file.Name}. Feilmelding: {ex.Message}");
        }

        return idListe;
    }
    public async Task<List<BrukerRespons>> FilesJson(IBrowserFile file)
    {
        if (file == null)
        {
            Console.WriteLine("Ingen fil valgt.");
            return new List<BrukerRespons>();
        }

        List<BrukerRespons> gyldigeBrukere = new List<BrukerRespons>();
        Console.WriteLine($"Laster opp filen '{file.Name}'...");

        try
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            {
                string jsonContent = await reader.ReadToEndAsync();
                List<BrukerRespons> brukerListe = JsonConvert.DeserializeObject<List<BrukerRespons>>(jsonContent);

                // Samler gyldige IDer
                var gyldigId = brukerListe.Where(b => int.TryParse(b.Id, out _)).Select(b => b.Id).ToList();

                if (gyldigId.Any() && file != null)
                {
                    //komma-separert streng
                    string idString = String.Join(",", gyldigId);

                    // Post IDs til api
                    await HttpClientPost.PostFlereId(idString);
                    Console.WriteLine($"IDer sendt til API: {idString}");

                    // metode for å hente responsen            
                    gyldigeBrukere = HttpClientPost.HentBrukerResponse(); 
                }
            }
        }
        catch (JsonException e)
        {
            Console.WriteLine($"Feil ved parsing av JSON: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Generisk feil: {e.Message}");
        }

        return gyldigeBrukere;
    }


    //3
    //Sjekker om filen samsvarer med riktige typer-filer
    public async Task Opplastning(IBrowserFile file)
    {
        try
        {

            if (file != null)
            {
                var fileExtension = Path.GetExtension(file.Name)?.ToLower();
                if (fileExtension == ".txt" || fileExtension == ".csv") 
                {
                    BrukerRes = await Files(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp");

                }
                else if (fileExtension == ".json")
                {
                    BrukerRes = await FilesJson(file);
                    Console.WriteLine($"Filen '{file.Name}' er ferdig lastet opp.");
                }

                else if (fileExtension != ".csv" || fileExtension != ".json" || fileExtension != ".txt")
                {
                    errors.Add("Det må være en JSON-, CSV eller TXT-fil.");
                    Console.WriteLine("Det må være en JSON-, CSV eller TXT-fil.");
                }


            }
            else if (file == null)
            {
                Console.WriteLine("Kan ikke importere fordi ingen vil er valgt");
            }
            else
            {
                Console.WriteLine("123123");
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }

    }


    public async Task Eksporter(string fileExtension)
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                string fileName = $"data.{fileExtension}";

                // Eksporter til CSV-fil
                if (fileExtension.ToLower() == "csv")
                {

                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await writer.WriteLineAsync("id,fornavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var bruker in BrukerRes)
                        {
                            string linje = $"{bruker.Id},{bruker.Fornavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await writer.WriteLineAsync(linje);
                        }

                    }
                    string fileContent = await File.ReadAllTextAsync(fileName);

                    await JsRuntimeMethod(fileName, fileContent);

                }
                // Eksporter til TXT-fil
                else if (fileExtension.ToLower() == "txt")
                {

                    using (StreamWriter writer = new StreamWriter(fileName))
                    {
                        await writer.WriteLineAsync("id,fornavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var ansatt in BrukerRes)
                        {

                            string linje = $"{ansatt.Id},{ansatt.Fornavn},{ansatt.Etternavn},{ansatt.Tlf},{ansatt.Brukernavn},{ansatt.Passord},{ansatt.Epost}";
                            await writer.WriteLineAsync(linje);
                        }
                    }
                    string fileContent = await File.ReadAllTextAsync(fileName);

                    await JsRuntimeMethod(fileName, fileContent);

                }

                Console.WriteLine($"Eksportert til {fileExtension.ToUpper()}.");
            }
            else
            {
                Console.WriteLine($"Ingen data å eksportere.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering: {ex.Message}");
        }
    }

    public async Task EksporterJson()
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                // Opprett en liste med anonyme objekter basert på ansatte-data
                var jsonData = BrukerRes;

                // Serialisere listen til JSON
                var jsonString = JsonConvert.SerializeObject(jsonData);

                await JsRuntimeMethod("data.json", jsonString);

                Console.WriteLine(jsonString, jsonData);
            }
            else
            {
                Console.WriteLine("Ingenting");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering til JSON: {ex.Message}");
        }
    }

    public async Task JsRuntimeMethod(string type, string convert)
    {
        if (JSRuntime != null)
        {
            await JSRuntime.InvokeVoidAsync("saveAsFile", type, convert);
            Console.WriteLine($"Vellykket med eksporteringen! Antall ansatte: {BrukerRes.Count}.");
        }
        else
        {
            Console.WriteLine("JSRuntime er null. Kan ikke eksportere til JSON.");
        }
    }








     

    

    
        }
    


    




