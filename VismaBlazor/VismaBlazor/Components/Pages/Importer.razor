@page "/"
@inject IConfiguration config
@inject IJSRuntime JSRuntime;
@using CsvHelper
@using Newtonsoft.Json
@using Radzen
@using Radzen.Blazor
@using System.IO
@using System.Globalization
@using VismaBlazor.Components.Data
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

@using System;
@using System.Collections.Generic;
@using System.Linq;


<PageTitle>Importer fil</PageTitle>

@*
Skal inneholde en knapp for å laste opp filer, og en knapp for å starte importen
Denne skal også sende filen til serveren og genere data fra filen.
Dataen skal så vises i resultat page som åpnes etter importen er ferdig.
*@


<div class="d-flex justify-content-between form-control">
<InputFile OnChange="LoadFiles" />
<button class="btn btn-primary" @onclick="@Import">Import</button> 
</div>



@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
        </ul>
}

@if (ansatte != null && ansatte.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Fornavn</th>
                <th>Etternavn</th>
                <th>E-post</th>
                <th>Brukernavn</th>
                <th>Passord</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ansatt in ansatte)
            {
                <tr>
                    <td>@ansatt.Id</td>
                    <td>@ansatt.Fornavn</td>
                    <td>@ansatt.Etternavn</td>
                    <td>@ansatt.EPost</td>
                    <td>@ansatt.Brukernavn</td>
                    <td>@ansatt.Passord</td>
                </tr>
            }
        </tbody>
    </table>
} 
else
{
    <p>Ingen data å vise... </p>  
}

@code{
    private List<Ansatte> ansatte;
    private long maxFileSize = 1024 * 1024 * 3;  // 3MB  List<Ansatte> ansatteListe = new List<Ansatte>();
    private List<string> errors = new();
    private IBrowserFile? file;

    private async Task LoadFiles(InputFileChangeEventArgs e) => file = e.File; //1



    //Her blir CsvHelper blitt tatt i bruk via NuGET PacketManager. 
    // Stream -> CsvReader -> Visualiser.
    //3


    //3
    //Her blir Json-Deserializerobject tatt i bruk..
    // Stream -> Reader -> Deserialize -> Visualiser.
    private async Task<List<Ansatte>> FileJson() //Json 
    {
        // Sjekker om filen er null. Returnerer tom liste, hvis den er tom.
        if (file is null)
        {
            return new List<Ansatte>();
        }

        //Try catch. Åpner strømmen og kopierer innholdet ved bruk av memorystream midlertidig.
        try
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                //Deserialisering av JSON ved bruk av streamreader til å lese json innhold fra memorystreamen.
                //Vi bruker Newtonsoft.Json- biblioteket for å deserialisere til en liste og returneres.
                using (StreamReader reader = new StreamReader(memoryStream))
                {
                    var json = await reader.ReadToEndAsync();
                    ansatte = JsonConvert.DeserializeObject<List<Ansatte>>(json);

                    return ansatte;
                }

            }
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    } 


    private async Task<List<Ansatte>> FileCsv() //CSV
    {

        // Sjekker om filen er null. Returnerer tom liste, hvis den er tom.
        if (file is null)
        {
            return new List<Ansatte>();
        }

        List<Ansatte> ansatteList = new List<Ansatte>();

        try
        {
            using var stream = file.OpenReadStream(); // fungerer som en scanner i java
            using (var reader = new StreamReader(stream))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {

                while (await csv.ReadAsync()) 
                {
                    var ansatte = csv.GetRecord<Ansatte>();
                    ansatteList.Add(ansatte);
                }
            }


            return ansatteList;


        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    } 




       private async Task<List<Ansatte>> FileTxt() // SKAL skille kommaer uavhengig av filtyper. Men husk å endre dette i metoden Import(). Klarer å skille i csv filer, men ikke Json.
    {
        if (file is null)
        {
            return new List<Ansatte>();
        }

        List<Ansatte> ansatteList = new List<Ansatte>();

        try
        {
            using var stream = file.OpenReadStream(maxFileSize); //Scanner sammenlignet med Java-scanner
            using var reader = new StreamReader(stream); //Leser
            string? line;
    

            while ((line = await reader.ReadLineAsync()) != null) //Leser linje for linje
            {
            
                var column = line.Split(','); //Leser linje for linje, men splitter ulike verdier med kommaer i 
                if (int.TryParse(column[0], out var id)) //  Id = int.Parse(column[0]) Kan også gjøres istedet for å bruke ( if (int.TryParse(column[0], out var id)) )
                {
                    var ansatt = new Ansatte
                        {
                            Id = id,
                            Fornavn = column[1],
                            Etternavn = column[2],
                            EPost = column[3],
                            Brukernavn = column[4],
                            Passord = column[5]
                        };

                    ansatteList.Add(ansatt);
                }
            }
        }
        catch (Exception ex) // Feilmeldinger
        {
            errors.Add($"Feil ved innlesing av fil: {file.Name}. Feilmelding: {ex.Message}");
        }

        return ansatteList;
    }
    private async Task Import()
    {
        try
        {
            
            errors.Clear(); //Nullstiller skjermen.

            if ( file != null)
            {
                var fileExtension = Path.GetExtension(file.Name)?.ToLower();

                if (fileExtension == ".json")
                {
                    ansatte = await FileJson(); //Metoden blir brukt i denne. Det skal kunne leses og desrialiseres en bestemt fil.
                }
                else if (fileExtension == ".csv")
                {
                    ansatte = await FileCsv();
                }
                else if (fileExtension == ".txt")
                {
                    ansatte = await FileTxt();
                }
                else if (fileExtension != ".csv" ||  fileExtension != ".json")
                {
                    errors.Add("Det må være en JSON- eller CSV-fil.");
                }
                else 
           
                    errors.Add("Du må laste opp en JSON- eller CSV-fil");
               
                {
                    
                }

            }
            
            

        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }
        
    } //2

 


}