@page "/Importer"
@inject IConfiguration config
@inject VismaBlazor.HttpClientPost HttpClientPost
@inject NavigationManager NavigationManager
@using CsvHelper
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using OpenQA.Selenium
@using Radzen
@using Radzen.Blazor
@using Microsoft.JSInterop;
@using System.IO
@using System.Globalization
@using System.Text
@using Microsoft.AspNetCore.Components.Forms;
@using Models
@attribute [Authorize]
@using System.Linq
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]


<PageTitle>Importer fil</PageTitle>

<RadzenCard class="py-4 flex-column" Style="width: 100%">
    <RadzenAlert Title="Last opp en fil" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        Velg en fil for å starte importen
    </RadzenAlert>
    <div id="lastOpp">
        <InputFile id="lastOppID" OnChange="lastOppFil" />
    </div>
    <RadzenAlert Title="Skriv inn domene for mail" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        F.eks: Generator.com
    </RadzenAlert>
    <div class="py-3">
        <RadzenTextBox id="generatormanuelt"
                       Value="@domain"
                       Change=@(args => domain = args)
                       Placeholder="F.eks: Generator.com"
                       style="width: 200px" />
    </div>
    <div id="oppLastning">
        <RadzenButton id="oppLastningID" 
            Text="Upload" 
            Click=@(args => Opplastning(fil)) 
            class="d-block pt-2 mt-4 bg-success" />
    </div>
</RadzenCard>

@if (feilError.Count > 0)
        @foreach (var feil in feilError)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                Her er det noe som har skjedd!
            </RadzenAlert>                     
}

@if (BrukerRes != null && BrukerRes.Any())
{
    
<div class="pb-4">
    <RadzenGrid id="grid" TItem="BrukerRespons" Data="@BrukerRes" AllowPaging="true" AllowSorting="true">
        <Columns>
            <RadzenGridColumn  TItem="BrukerRespons" Property="Id" Title="ID" Width="80px" />
            <RadzenGridColumn TItem="BrukerRespons" Property="NyId" Title="NyID" Width="80px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Fornavn" Title="Fornavn" Width="100px" />
            <RadzenGridColumn TItem="BrukerRespons" Property="Mellomnavn" Title="Mellomnavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Etternavn" Title="Etternavn" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Tlf" Title="Telefon" Width="100px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Brukernavn" Title="Brukernavn" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Passord" Title="Passord" Width="120px" />
            <RadzenGridColumn  TItem="BrukerRespons" Property="Epost" Title="E-post" Width="120px" />
        </Columns>
    </RadzenGrid>
   <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10" Wrap="FlexWrap.Wrap" class="pt-4">
        <RadzenButton id="Jsonfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (EksporterJson())) Text="JSON" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Csvfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("csv"))) Text="CSV" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton id="Txtfil" Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => (Eksporter("txt"))) Text="TXT" ButtonStyle="ButtonStyle.Success" />
  </RadzenStack>
   </div>
} 
else
{
    <RadzenAlert Title="Ingen data å vise." style="width: 100%" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose=false>
        Last opp en fil (TXT, CSV eller JSON)
    </RadzenAlert>
}


@code
{
    public string? domain { get; set; }
    public List<BrukerRespons>? BrukerRes;
    private List<string> feilError = new List<string>();
    public IBrowserFile? fil;
  

    // Inject IJSRuntime 
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    //1
    public async Task lastOppFil(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File != null)
            {
                fil = e.File;
                Console.WriteLine($"Filen '{fil.Name}' ble valgt.");
            }
            else
            {
                Console.WriteLine("Ingen fil ble valgt.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved lasting av fil: {ex.Message}");
            throw; // Kaster unntaket videre
        }
    }

    public async Task<List<BrukerRespons>> Filer(IBrowserFile fil)
    {
        if (fil is null)
        {
            return new List<BrukerRespons>();
        }
        List<BrukerRespons> idListe = new List<BrukerRespons>();
        Console.WriteLine($"Filen {fil.Name} laster opp"); //Sjekk ved testing
        try
        {
            using (var stream = fil.OpenReadStream())
            using (var leser = new StreamReader(stream))
            {
                var alleID = new List<string>();
                string linje;
                bool startLinje = true;
                while ((linje = await leser.ReadLineAsync()) != null)
                {
                    if (startLinje)
                    {
                        startLinje = false;
                        continue;
                    }
                    alleID.AddRange(linje.Split(',').Where(id => !string.IsNullOrWhiteSpace(id)));
                }
                if (alleID.Count > 0)
                {
                    try
                    {
                        // Konverter listen til komma sepparert
                        var idsString = string.Join(",", alleID);

                        // ikke for hver linje, men alle på en
                        await HttpClientPost.PostFlereId(idsString, domain);

                        // Anta at HentBrukerResponse er en metode for å hente lagrede svar
                        if (HttpClientPost.HentBrukerResponse() != null)
                        {
                            idListe.AddRange(HttpClientPost.HentBrukerResponse());
                        }
                        Console.WriteLine("Brukerdata for alle IDer lagt til."); //Sjekk ved testing
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Feil ved henting av brukerdata: {ex.Message}");//Sjekk ved testing
                    }
                }
            }
        }
        catch (Exception ex)
        {
            feilError.Add($"Feil ved innlesing av fil: {fil.Name}. Feilmelding: {ex.Message}");
        }
        return idListe;
    }

    public async Task<List<BrukerRespons>> FilerJson(IBrowserFile fil)
    {
        if (fil == null)
        {
            Console.WriteLine("Ingen fil valgt.");
            return new List<BrukerRespons>();
        }
        List<BrukerRespons> gyldigeBrukere = new List<BrukerRespons>();
        Console.WriteLine($"Laster opp filen '{fil.Name}'...");
        try
        {
            using (var stream = fil.OpenReadStream())
            using (var leser = new StreamReader(stream))
            {
                string jsonContent = await leser.ReadToEndAsync();
                List<BrukerRespons> brukerListe = JsonConvert.DeserializeObject<List<BrukerRespons>>(jsonContent);
                // Samler gyldige IDer
                var gyldigId = brukerListe.Where(b => int.TryParse(b.Id, out _)).Select(b => b.Id).ToList();
                if (gyldigId.Any() && fil != null)
                {
                    //komma-separert streng
                    string idString = String.Join(",", gyldigId);
                    if (domain != null){
                    // Post IDs til api
                    await HttpClientPost.PostFlereId(idString, domain);
                    Console.WriteLine($"IDer sendt til API: {idString}");
                }
                    // metode for å hente responsen            
                    gyldigeBrukere = HttpClientPost.HentBrukerResponse(); 
                }
            }
        }
        catch (JsonException e)
        {
            Console.WriteLine($"Feil ved parsing av JSON: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Generisk feil: {e.Message}");
        }
        return gyldigeBrukere;
    }
    //3
    //Sjekker om filen samsvarer med riktige typer-filer
    public async Task Opplastning(IBrowserFile fil)
    {
        try
        {
            if (fil != null)
            {
                var fileExtension = Path.GetExtension(fil.Name)?.ToLower();
                if (fileExtension == ".txt" || fileExtension == ".csv") 
                {
                    BrukerRes = await Filer(fil);
                    Console.WriteLine($"Filen '{fil.Name}' er ferdig lastet opp");
                }
                else if (fileExtension == ".json")
                {
                    BrukerRes = await FilerJson(fil);
                    Console.WriteLine($"Filen '{fil.Name}' er ferdig lastet opp.");
                }
                else if (fileExtension != ".csv" || fileExtension != ".json" || fileExtension != ".txt")
                {
                    feilError.Add("Det må være en JSON-, CSV eller TXT-fil.");
                    Console.WriteLine("Det må være en JSON-, CSV eller TXT-fil.");
                }
            }
            else if (fil == null)
            {
                Console.WriteLine("Kan ikke importere fordi ingen vil er valgt");
            }
            else
            {
                Console.WriteLine("Throw: Resterende feil.");
            }
        }
        catch (Exception ex)
        {
            feilError.Add($"Error: {ex.Message}");
            throw;
        }
    }

    public async Task Eksporter(string fileExtension)
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                string filNavn = $"data.{fileExtension}";
                // Eksporter til CSV-fil
                if (fileExtension.ToLower() == "csv")
                {
                    using (StreamWriter writer = new StreamWriter(filNavn,false, Encoding.UTF8))
                    {
                        await writer.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var bruker in BrukerRes)
                        {
                            string linjePerBruker = $"{bruker.Id},{bruker.NyId},{bruker.Fornavn},{bruker.Mellomnavn},{bruker.Etternavn},{bruker.Tlf},{bruker.Brukernavn},{bruker.Passord},{bruker.Epost}";
                            await writer.WriteLineAsync(linjePerBruker);
                        }
                    }
                    string innhold = await File.ReadAllTextAsync(filNavn, Encoding.UTF8);
                    await JsRuntimeMetode(filNavn, innhold);
                }
                // Eksporter til TXT-fil
                else if (fileExtension.ToLower() == "txt")
                {
                    using (StreamWriter writer = new StreamWriter(filNavn, false, Encoding.UTF8))
                    {
                        await writer.WriteLineAsync("id,nyid,fornavn,mellomnavn,etternavn,tlf,brukernavn,passord,epost");
                        foreach (var ansatt in BrukerRes)
                        {
                            string linjePerBruker = $"{ansatt.Id},{ansatt.NyId},{ansatt.Fornavn},{ansatt.Mellomnavn},{ansatt.Etternavn},{ansatt.Tlf},{ansatt.Brukernavn},{ansatt.Passord},{ansatt.Epost}";
                            await writer.WriteLineAsync(linjePerBruker);
                        }
                    }
                    string innhold = await File.ReadAllTextAsync(filNavn, Encoding.UTF8);
                    await JsRuntimeMetode(filNavn, innhold);
                }
                Console.WriteLine($"Eksportert til {fileExtension.ToUpper()}.");
            }
            else
            {
                Console.WriteLine($"Ingen data å eksportere.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering: {ex.Message}");
        }
    }

    public async Task EksporterJson()
    {
        try
        {
            if (BrukerRes != null && BrukerRes.Any())
            {
                // Oppretter liste med anonyme objekter fra ansatte-data 
                var jsonData = BrukerRes;
                // Serialiserer til json
                var jsonString = JsonConvert.SerializeObject(jsonData, Formatting.Indented);
                await JsRuntimeMetode("data.json", jsonString);
                Console.WriteLine(jsonString, jsonData);
            }
            else
            {
                Console.WriteLine("Ingenting");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved eksportering til JSON: {ex.Message}");
        }
    }

    //Lager metode, slik at jeg kan bare kalle på metoden i eksporter metodene
    public async Task JsRuntimeMetode(string type, string konverter)
    {
        if (JSRuntime != null)
        {
            await JSRuntime.InvokeVoidAsync("saveAsFile", type, konverter);
            Console.WriteLine($"Vellykket med eksporteringen! Antall ansatte: {BrukerRes.Count}.");
        }
        else
        {
            Console.WriteLine("JSRuntime er null. Kan ikke eksportere til JSON.");
        }
    }

     /*KILDER
     
      https://blazor.radzen.com/docs/guides/getting-started/use-component.html?tabs=constant = Radzen komponenter
      https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms.ibrowserfile?view=aspnetcore-8.0 = IBrowserFile
      https://www.newtonsoft.com/json = Serialisering og deserialisering av JSON
      https://learn.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.jsruntime?view=aspnetcore-8.0 = JSRuntime + InvokeVoidAsync
      https://learn.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-8.0 og https://learn.microsoft.com/en-us/dotnet/standard/io/ StreamWriter + StreamReader (Lignende pensum fra PRO1000)

    */
}
    





   